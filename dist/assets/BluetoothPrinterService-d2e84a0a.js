var p=Object.defineProperty;var f=(d,e,t)=>e in d?p(d,e,{enumerable:!0,configurable:!0,writable:!0,value:t}):d[e]=t;var s=(d,e,t)=>(f(d,typeof e!="symbol"?e+"":e,t),t);const c=class c{constructor(){s(this,"connectedDevice",null);s(this,"characteristic",null);s(this,"printerStatus",{connected:!1,printing:!1});s(this,"statusListeners",[]);s(this,"PRINTER_SERVICES",["49535343-fe7d-4ae5-8fa9-9fafd205e455","6e400001-b5a3-f393-e0a9-e50e24dcca9e","0000ff00-0000-1000-8000-00805f9b34fb","12345678-1234-1234-1234-123456789abc"]);s(this,"PRINTER_CHARACTERISTICS",["49535343-1e4d-4bd9-ba61-23c647249616","6e400002-b5a3-f393-e0a9-e50e24dcca9e","0000ff01-0000-1000-8000-00805f9b34fb","12345678-1234-1234-1234-123456789abd"]);navigator.bluetooth||console.warn("Web Bluetooth API is not supported in this browser")}static getInstance(){return c.instance||(c.instance=new c),c.instance}isBluetoothSupported(){return"bluetooth"in navigator}async scanForPrinters(){if(!this.isBluetoothSupported())throw new Error("Web Bluetooth is not supported in this browser");try{const e=await navigator.bluetooth.requestDevice({acceptAllDevices:!0,optionalServices:[...this.PRINTER_SERVICES]});return e?[{id:e.id,name:e.name||"Unknown Printer",device:e,connected:!1}]:[]}catch(e){throw console.error("Error scanning for printers:",e),new Error("Failed to scan for printers. Make sure Bluetooth is enabled.")}}async connectToPrinter(e){var t,r;if(!e.device)throw new Error("No device associated with this printer");try{this.updateStatus({...this.printerStatus,connected:!1}),(t=e.device.gatt)!=null&&t.connected&&(e.device.gatt.disconnect(),await new Promise(n=>setTimeout(n,1e3))),console.log("Connecting to GATT server...");const i=await((r=e.device.gatt)==null?void 0:r.connect());if(!i)throw new Error("Failed to connect to GATT server");console.log("GATT server connected, searching for services...");let o=!1,h=!1;for(const n of this.PRINTER_SERVICES)try{console.log(`Trying service: ${n}`);const u=await i.getPrimaryService(n);for(const l of this.PRINTER_CHARACTERISTICS)try{console.log(`Trying characteristic: ${l}`);const a=await u.getCharacteristic(l);console.log(`Found characteristic ${l} with properties:`,{write:a.properties.write,writeWithoutResponse:a.properties.writeWithoutResponse,notify:a.properties.notify,indicate:a.properties.indicate,read:a.properties.read}),this.characteristic=a,o=!0,h=!0,console.log(`Successfully connected with service ${n} and characteristic ${l}`);break}catch(a){console.log(`Characteristic ${l} not found or not accessible:`,a);continue}if(h)break}catch{console.log(`Service ${n} not found`);continue}if(!o||!h)throw new Error("No compatible service/characteristic found. This printer may not be supported.");e.device.addEventListener("gattserverdisconnected",()=>{console.log("Printer disconnected"),this.handleDisconnect()}),this.connectedDevice=e.device,this.updateStatus({connected:!0,printing:!1,error:void 0}),console.log("Printer connected successfully")}catch(i){throw console.error("Error connecting to printer:",i),this.updateStatus({connected:!1,printing:!1,error:"Failed to connect to printer"}),i}}async disconnect(){var e,t;(t=(e=this.connectedDevice)==null?void 0:e.gatt)!=null&&t.connected&&this.connectedDevice.gatt.disconnect(),this.handleDisconnect()}handleDisconnect(){this.connectedDevice=null,this.characteristic=null,this.updateStatus({connected:!1,printing:!1,error:void 0})}getStatus(){return this.printerStatus}onStatusChange(e){return this.statusListeners.push(e),()=>{const t=this.statusListeners.indexOf(e);t>-1&&this.statusListeners.splice(t,1)}}updateStatus(e){this.printerStatus=e,this.statusListeners.forEach(t=>t(e))}async validateConnection(){var e,t;if(!this.connectedDevice||!this.characteristic)throw new Error("No printer connected");if(!((e=this.connectedDevice.gatt)!=null&&e.connected))throw new Error("Printer connection lost");if(!this.characteristic.service||!((t=this.characteristic.service.device.gatt)!=null&&t.connected))throw new Error("Printer characteristic is no longer valid")}async sendData(e){if(await this.validateConnection(),!this.characteristic)throw new Error("No printer connected");try{for(let r=0;r<e.length;r+=15){const i=e.slice(r,r+15);try{try{await this.characteristic.writeValueWithoutResponse(i)}catch{await this.characteristic.writeValue(i)}await new Promise(o=>setTimeout(o,50))}catch(o){console.error(`Failed to send chunk ${r}-${r+15}:`,o),await new Promise(h=>setTimeout(h,200));try{await this.characteristic.writeValueWithoutResponse(i),console.log("Successfully sent chunk using writeValueWithoutResponse")}catch{try{await this.characteristic.writeValue(i),console.log("Successfully sent chunk using writeValue")}catch(n){throw new Error(`Failed to send data chunk after trying all write methods: ${n instanceof Error?n.message:String(n)}`)}}}}}catch(t){throw console.error("Error sending data to printer:",t),this.updateStatus({...this.printerStatus,error:"Communication error"}),new Error(`Failed to send data to printer: ${t instanceof Error?t.message:String(t)}`)}}async print(e){if(await this.validateConnection(),!this.printerStatus.connected)throw new Error("No printer connected");try{this.updateStatus({...this.printerStatus,printing:!0,error:void 0}),console.log("Initializing printer..."),await this.sendData(new Uint8Array([27,64])),await new Promise(t=>setTimeout(t,200)),console.log(`Executing ${e.length} print commands...`);for(let t=0;t<e.length;t++)try{await this.executeCommand(e[t]),t<e.length-1&&await new Promise(r=>setTimeout(r,10))}catch(r){console.error(`Failed to execute command ${t}:`,e[t],r)}console.log("Finishing print job..."),await this.sendData(new Uint8Array([10,10,10])),await new Promise(t=>setTimeout(t,100)),await this.sendData(new Uint8Array([29,86,1])),this.updateStatus({...this.printerStatus,printing:!1}),console.log("Print job completed successfully")}catch(t){throw console.error("Print job failed:",t),this.updateStatus({...this.printerStatus,printing:!1,error:"Print job failed"}),new Error(`Print job failed: ${t instanceof Error?t.message:String(t)}`)}}async executeCommand(e){switch(e.type){case"text":if(e.data){const i=this.encodeText(e.data);await this.sendData(i)}break;case"align":const t={left:new Uint8Array([27,97,0]),center:new Uint8Array([27,97,1]),right:new Uint8Array([27,97,2])};e.align&&t[e.align]&&await this.sendData(t[e.align]);break;case"size":const r={normal:new Uint8Array([29,33,0]),wide:new Uint8Array([29,33,16]),tall:new Uint8Array([29,33,1]),double:new Uint8Array([29,33,17])};e.size&&r[e.size]&&await this.sendData(r[e.size]);break;case"bold":await this.sendData(new Uint8Array([27,69,1]));break;case"feed":await this.sendData(new Uint8Array([10]));break;case"cut":await this.sendData(new Uint8Array([29,86,1]));break;case"drawer":await this.sendData(new Uint8Array([27,112,0,25,250]));break}}encodeText(e){return new TextEncoder().encode(e)}async testPrint(){const e=[{type:"align",align:"center"},{type:"size",size:"double"},{type:"text",data:`TEST PRINT
`},{type:"size",size:"normal"},{type:"text",data:`─────────────────────
`},{type:"text",data:`Printer connection successful!
`},{type:"text",data:`Time: ${new Date().toLocaleString()}
`},{type:"text",data:`─────────────────────
`},{type:"feed"},{type:"feed"}];await this.print(e)}async openCashDrawer(){if(await this.validateConnection(),!this.printerStatus.connected)throw new Error("No printer connected");await this.sendData(new Uint8Array([27,112,0,25,250]))}};s(c,"instance");let w=c;export{w as BluetoothPrinterService};
